pipeline {
    agent any
	parameters {
	    
	    string(name: 'devops_stage', defaultValue: 'buildandpackage', description: 'DevOps Stage - buildandpackage, SIT, UAT')
		string(name: 'alm_level', defaultValue: 'Feature', description: 'Application Life Cycle Level - Feature, Testing, Release')
		string(name: 'target_environment', defaultValue: 'Non-Prod', description: 'Target Environment - Prod, Non-Prod')
    }    
    environment {
        devops_stage = "${params.devops_stage}"
		target_environment = "${params.target_environment}"
		alm_level = "${params.alm_level}"

        builddir = "angular_project"

        //make sure directory path is defined with preceeding slash
        pathDirectoryToClone = "/ui"  
		gitCredentialKey = "git-credential"
		gitRepoUrl = "github.com/vndube/angular-8-devops-demo.git"
		
		
		sonar_project = "This_is_my_angular8_demo_project"  
	    sonarServerUrl = ""
        analysisId = ""
   }

    stages {
	
		stage('SCM Initialization') {
		//this will download the source code from specified SCM. SCM location is passed in parameter named as gitrepourl and credential key id
		   steps {
		      echo "Clone the repository under a specified directory. Sparse Check-out will be used.  ${pathDirectoryToClone}"
				
				sh 'mkdir -pv ' + builddir 
				script{
				    def paths = [["path":"${pathDirectoryToClone}"],["path": "/devops"]]
					dir(builddir) {
					    sh 'git config --global credential.helper cache'
                        sh 'git config --global push.default simple'
                        sh 'git config --global user.email "vndube@yahoo.com"'
                        sh 'git config --global user.name "vndube"'
                        
                        
						checkout([$class: 'GitSCM', 
						   branches: [[name: '*/master']], 
						   doGenerateSubmoduleConfigurations: false, 
						   extensions: [
								[$class: 'SparseCheckoutPaths',
								 sparseCheckoutPaths: paths
								]
							], 
						   submoduleCfg: [], 
						   userRemoteConfigs: [[  credentialsId: gitCredentialKey, url: 'https://'+gitRepoUrl]]])
						   sh "git checkout master"
					}
				}
		    }			  
		}
        stage("Perform SAST") {
            when {
	   	        environment name:'alm_level', value: 'Release'
			}
            stages{
                stage("Performing Analysis") {
				   steps {
				      echo "In Performing SAST"
				      dir("${builddir}${pathDirectoryToClone}") {
				        withSonarQubeEnv('localSonar') {
                          //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar -Dsonar.login=XXXXXXXXX'
                          sh '/var/jenkins_home/sonar-scanner-cli/bin/sonar-scanner -Dsonar.projectKey=${sonar_project}'
                          //below code is for quality gate
                          script{
                            waitforqualitgateLocal() 
                          }
                        }
				      }
				      
				   }
                }
                // No need to occupy a node
                stage("Quality Gate"){
				   steps {
				       echo "In Quality Gate"
				       script{
				         def qg = getQualityResult()
                         if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                         }
				       }
                    }
               }
            }
        }
	
        stage("build, package and push package to repository") {
		//this stage will perform the packages loaded from  
 		    when {
			    environment name:'devops_stage', value: 'buildandpackage'
            }
            stages {
                stage("Download Required packages") {
                    steps {
                        echo "Building NPM package"
                        script {
                          sh 'npm install'
                        }
                    }
                }
				stage("Push bars to SCM") {
                    steps {
                        echo "Push bars to SCM"
                       // uploadPackage()
                    }
                }
				stage("Build Docker Container") {
                    steps {
                      echo "building docker image from ${WORKSPACE}"
                      dir("${builddir}/devops") {
                        //script{
                         // dockerImage = docker.build imagename
                        //}
                      }
                    }
                }				
                stage("push docker image "){
                    steps{
                      echo "Pushing docker image to registry ${docker_registry_url}"
                      //script{
                        //docker.withRegistry( "https://"+docker_registry_url, docker_credential ) {
                         //  dockerImage.push("$BUILD_NUMBER")
                         //  dockerImage.push('latest')
                        //}
                      //}
                   }  
                }

                stage("Scanning the image") {
                   when {
				      environment name:'alm_level', value: 'Release'
				   }
				   steps {
				      echo "In Scanning the image"
				   }
                }	

				stage("Perform DIT") {
					stages {
						stage("Deploying Image") {
							steps {
								echo "In Deploying Image"
							}
						}
						stage("Pushing APIs") {
							steps {
								echo "In Pushing APIs"
							}
						}
						stage("Performing DIT ") {
							steps {
								echo "In Performing DIT"
							}
						}
					}
                }					
			}
        }

		stage("Function Testing - SIT") {
			when {
				environment name:'devops_stage', value: 'SIT'
            }
			stages {
				stage("SIT - Pull the image and Deploying Image") {
					steps {
						echo "SIT - In Deploying Image"
					}
				}
				stage("SIT - Pushing APIs") {
					steps {
						echo "SIT - In Pushing APIs"
					}
				}
				stage("Performing SIT ") {
					steps {
						echo "In Performing SIT"
					}
				}
			}
        }
		
		stage("Acceptance Testing - UAT") {
			when {
				environment name:'devops_stage', value: 'UAT'
            }
			stages {
				stage("UAT - Pull the image and Deploying Image") {
					steps {
						echo "UAT - In Deploying Image"
					}
				}
				stage("UAT - Pushing APIs") {
					steps {
						echo "UAT - In Pushing APIs"
					}
				}
				stage("Performing UAT ") {
					steps {
						echo "In Performing UAT"
					}
				}
			}
        }
    }

    post {
        // Always runs. And it runs before any of the other post conditions.
        //always {
            // Let's wipe out the workspace before we finish!
        //    deleteDir()
        //}
        success {
            sendEmail("Successful");
        }
        unstable {
            sendEmail("Unstable");
        }
        failure {
            sendEmail("Failed");
        }
    }

// The options directive is for configuration that applies to the whole job.
    options {
        // For example, we'd like to make sure we only keep 10 builds at a time, so
        // we don't fill up our storage!
        buildDiscarder(logRotator(numToKeepStr: '5'))

        // And we'd really like to be sure that this build doesn't hang forever, so
        // let's time it out after an hour.
        timeout(time: 25, unit: 'MINUTES')
    }		
}

def copySource(target){
    sh 'mkdir -pv '+target
    
    //def sourceDir = "${source_dir}"
    def workspace = pwd()
    echo "current directory is $workspace"
    
    sh 'cp -rv ./${builddir}${source_dir}/. '+target
    //sh 'cp -rv ./${builddir}/common/eCollection_MISIntimation_API/. target'
   // sh 'cp -rv ./${builddir}/common/eCollection_MessageHolding_CustomerInstance/. target'

    def arr = "${dependents}".split(",")
    for (dir in arr) {
       println "now got ./${builddir}${dir}/."

       sh 'cp -rv '+"./${builddir}${dir}/. "+target
    }

}

def buildPackage(){

		//This is to be modified as per mqsipackagebar tool 
		sh '''
		#cd target
		#tar -cvf ../${builddir}/devops/packages/package-${builddir}.tar .
		#mqsipackagebar -a ${params.clientdir}.bar -w . -k ${params.clientdir} 
		.  /opt/ibm/ace-11/server/bin/mqsiprofile
	
		#/opt/ibm/ace-11/server/bin/mqsipackagebar -a package-${builddir}.bar -w . -k package-${builddir} 
		cd ..
		'''	
		dir("target@tmp") {
		   deleteDir()
		}
}

def uploadPackage(){
    dir("${builddir}") {
       withCredentials([usernamePassword(credentialsId: credentialkey, 
                       passwordVariable: 'GIT_PASSWORD', 
                       usernameVariable: 'GIT_USERNAME')]) {

			sh '''
			pwd
			git remote -v
            git remote set-url origin "https://${GIT_USERNAME}:${GIT_PASSWORD}@${gitrepourl}"
			git add .
			if ! git commit -m "adding package files" | grep -i "nothing to commit\\|no changes added"; 
			then
				echo "pushing changed files - bar files"
				git push origin HEAD:master
			fi
			'''
       } //end of withCredentials
	}
}

// get change log to be send over the mail
@NonCPS
def getChangeString() {
    MAX_MSG_LEN = 100
    def changeString = ""

    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += " - ${truncated_msg} [${entry.author}]\n"
		}
    }
}



def waitforqualitgateLocal(){
      sh "cat .scannerwork/report-task.txt"
      
      def props = readProperties  file: '.scannerwork/report-task.txt'
      echo "properties=${props}"
      sonarServerUrl=props['serverUrl']
      def ceTaskUrl= props['ceTaskUrl']
      def ceTask
      timeout(time: 1, unit: 'MINUTES') {
          waitUntil {
              def response = httpRequest ceTaskUrl
              ceTask = readJSON text: response.content
              echo ceTask.toString()
              echo ceTask["task"]["status"]
              
              analysisId = ceTask["task"]["analysisId"]
              return  "SUCCESS".equals(ceTask["task"]["status"])

          }
      }
      
//      def response2 = httpRequest url : sonarServerUrl + "/api/qualitygates/project_status?analysisId=" + ceTask["task"]["analysisId"], authentication: 'jenkins_scanner'

//        def response2 = httpRequest url : sonarServerUrl + "/api/qualitygates/project_status?analysisId=" + ceTask["task"]["analysisId"]
//        echo "${response2}"
//        def qualitygate =  readJSON text: response2.content
//        echo qualitygate.toString()
//        return qualitygate["projectStatus"]

//        return qualitygate["projectStatus"]["status"]
//        if ("ERROR".equals(qualitygate["projectStatus"]["status"])) {
//          error  "Quality Gate failure"
//        } 
}
def getQualityResult(){
        def response2 = httpRequest url : sonarServerUrl + "/api/qualitygates/project_status?analysisId=" + analysisId
        echo "${response2}"
        def qualitygate =  readJSON text: response2.content
        echo qualitygate.toString()
        return qualitygate["projectStatus"]
}

def sendEmail(status) {
   echo "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})"
   echo "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})"
   echo "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" 
  
  //  mail(
  //          to: "$EMAIL_RECIPIENTS",
  //          subject: "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})",
  //          body: "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" + "\n")
}

def buildJsonStr(task_name,task_sequence_number){
    def task_dateTime=new Date()
    def task_id=UUID.randomUUID().toString()

	 def dataStruct = [
              'taskId' : task_id,
              'taskSequenceNumber' : task_sequence_number,
			  'totalTasksCount' : 9,
			  'taskName' : task_name,
			  'taskDateTime' : task_dateTime,
			  'buildId': "${BUILD_ID}",
			  'targetEnvironment' : ${target_environment},
			  'productName': ${product_name},
			  'serviceName' : ${business_scenario_name},
			  'projectId' : ${project_id},
			  'clientCode' : ${clientCode},
			  'buildInitiatingUserId' : ${build_initiating_user_id},
			  'taskLog' : ${taskCompletionCode},
			  'taskReasonCode': ${task_reason_code},
			  'taskMessage' : ${task_message},
			  'tasksAborted' : ${tasks_aborted}
     ]
	 
	 def json = new groovy.json.JsonBuilder(dataStruct)
	 
	 return json.toString()
}


def sendEventNotification(task_name,task_sequence_number){
	 
	 script {
	    final String jsonData = buildJsonStr(task_name,task_sequence_number) 
		final def (String response, int code) =
 		         sh(script: "curl --insecure -vs -X POST -w '\\n%{response_code}' ${event_publishing_endpoint} -H 'accept: application/json' -H 'Content-Type: application/json' -d ${jsonData}", returnStdout: true).trim().tokenize("\n")
		
//		echo response
		echo "HTTP response status code: $code"
        if (code == 200) {
               echo "Successfully published"
       }
		
	 }
}
